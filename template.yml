AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS SomApiApp API - mark-event::mark-event-app
Globals:
  Function:
    Environment:
      Variables:
        DYNAMODB_STREAM_ARN: arn:aws:dynamodb:eu-west-2:022099488461:table/RegistrationNumberEvent/stream/2019-12-02T13:40:24.840
  Api:
    EndpointConfiguration: REGIONAL

Resources:
  # Lambda listens to a DynamoDB stream on the RegistrationNumberEventDynamoDBTable and writes the
  # data to KinesisStream
  ProcessDynamoDBStream:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.sighware.mark.stream.DynamoDbStreamProcessor::handleRequest
      Runtime: java8
      CodeUri: target/mark-event.jar
      MemorySize: 1024
      Environment:
        Variables:
          KINESIS_STREAM_NAME: !Ref KinesisStream
      Policies:
        - AWSLambdaDynamoDBExecutionRole
        - KinesisCrudPolicy:
            StreamName: !Ref KinesisStream
      Events:
        Stream:
          Type: DynamoDB
          Properties:
            Stream: arn:aws:dynamodb:eu-west-2:022099488461:table/RegistrationNumberEvent/stream/2019-12-02T14:37:35.528
            BatchSize: 1
            StartingPosition: TRIM_HORIZON

  # Lambda listens to KinesisStream and writes the events to the S3 EventBucket
  # Normally this lambda would be in a separate project as it is a client of the event stream. Only included
  # here for illustration purposes :-)
  ProcessKinesisStreamS3:
    Type: AWS::Serverless::Function
    Properties:
      Handler: com.sighware.mark.stream.KinesisStreamS3Processor::handleRequest
      Runtime: java8
      CodeUri: target/mark-event.jar
      MemorySize: 1024
      Environment:
        Variables:
          BUCKET_NAME: !Ref EventBucket
      Policies:
        - KinesisStreamReadPolicy:
            StreamName: !Ref KinesisStream
        - S3CrudPolicy:
            BucketName: !Ref EventBucket
      Events:
        Stream:
          Type: Kinesis
          Properties:
            #Stream: !GetAtt KinesisStream.Arn
            Stream: !GetAtt StreamConsumer.ConsumerARN
            BatchSize: 1
            StartingPosition: TRIM_HORIZON

  KinesisStream:
    Type: AWS::Kinesis::Stream
    Properties:
      Name: RegistrationNumberEventKinesisStream
      ShardCount: 1

  # HTTP/2 stream consumer please see:
  #     https://docs.aws.amazon.com/streams/latest/dev/introduction-to-enhanced-consumers.html
  StreamConsumer:
    Type: AWS::Kinesis::StreamConsumer
    Properties:
      StreamARN: !GetAtt KinesisStream.Arn
      ConsumerName: RegistrationNumberEventStreamConsumer

  EventBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: mark-event

Outputs:
  StreamARN:
    Description: "Kinesis Stream ARN"
    Value: !GetAtt KinesisStream.Arn
  ConsumerARN:
    Description: "Stream consumer ARN"
    Value: !GetAtt StreamConsumer.ConsumerARN
